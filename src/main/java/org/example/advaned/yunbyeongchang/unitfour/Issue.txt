Q. 예상한 넓이와 실제 출력된 넓이가 다른 이유
본 변수 rect는 Rectangle지만 new Square(), 즉 정사각형으로 정의 됨
상속 관계 덕에 정의 자체는 가능하지만 이 때문에 setWidth, setHeight 함수가 정사각형 버전으로 Override되어 실행.
따라서 높이랑 너비가 강제로 통일되어 높이와 너비가 각각 10인 정사각형이 되어버린다.

코드 문제 분석
new Sqaure()로 정의되었기 때문에 Square에 있는 setWidth, setHeight가 강제로 동기화된다.
Rectangle 클래스의 setWidth, setHeight는 각각 독립적으로 값 설정이 가능하지만 Square에서는 그것이 불가능하다.
따라서 Rectangle로 선언했다 하더라도 강제로 Square의 메서드가 실행되므로 의도와 다르게 동작한다.

Q. Square가 Rectangle을 상속받으면 안 되는 이유는?
Rectangle은 직사각형이므로 너비와 높이의 값이 각각 달라질 수 있다.
하지만 Square은 정사각형이므로 너비와 높이의 값이 항상 같아야 한다.
즉 Square 클래스는 Rectangle 클래스의 모든 메서드를 대체할 수 없으므로
is-a 관계에 위반되기 때문에 상속 관계를 맺을 수 없다.

Q. LSP 관점에서 위반되는 부분은?
LSP 원칙에 따라, 상속 관계에서 하위 클래스는 상위 클래스의 모든 속성과 기능을 유지, 확장해서 사용한다.
즉, Rectangle을 사용하는 코드는 무엇이든 Square에서도 동일한 결과값 + a가 나와야 한다.
하지만 현재 구조에서는 너비와 높이가 다른 결과값이 도출되지 못한다.
즉 기존 setWidth, setHeight의 기능이 달라져버렸기 때문에 LSP에 위반된다.

Q. 개선 이후 설계가 LSP를 어떻게 만족하는가?
LSP 원칙에 따라 하위 클래스는 상위 클래스의 모든 속성과 기능을 유지, 확장해서 사용한다.
현재 구조에서는 Rectangle 클래스와 Square 클래스의 setWidth, setHeight가 각자 방식대로 구현된다.
다르게 동작하는 기능 메서드를 공유하지 않고 대체하지 않으므로 서로 메서드가 실행되는 데 영향을 주지 않는다.
또한 Rectangle, Square 클래스의 부모 클래스인 Shape에서 getArea 메서드의 호출 시, 각자의 클래스 메서드로 잘 동작되므로
속성과 기능을 유지한다는 규칙에 위배되지 않으므로 LSP 원칙을 만족한다.